import cosas.*
import camion.*

describe "Camion vacio se le carga a Bumblebee" {
  method initialize() {
    camion.cosas().clear()
  }
  
  test "El camion esta vacio" {
    assert.that(camion.cosas().isEmpty())
    assert.equals(0, camion.cosas().size())
  }

  test "Al camion se le agrega Bumblebee"{
    camion.cargar(bumblebee)
    
    assert.that(camion.cosas().contains(bumblebee))
    
    assert.equals(1, camion.cosas().size())
  }
}

describe "Camion con Bumblebee se le carga a Knight Rider" {
  method initialize() {
    camion.cargar(bumblebee)
  }

  test "Camion tiene a Bumblebee" {
    assert.that(camion.cosas().contains(bumblebee))
  }
  
  test "Se carga a Knight Rider" {
    camion.cargar(knightRider)
    
    assert.that(camion.cosas().contains(knightRider))
    
    assert.equals(2, camion.cosas().size())
  }
}

describe "Camion con Bumblebee y Knight Rider se le descarga Bumblebee" {
    method initialize() {
      camion.cargar(bumblebee)
      camion.cargar(knightRider)
    }
  test "Camion contiene a Bumblebee y a Knight Rider" {
    assert.that(camion.cosas().contains(bumblebee))
    assert.that(camion.cosas().contains(knightRider))

    assert.equals(2, camion.cosas().size())
  }

  test "Descargar a Bumblebee, quedando solo Knight Rider Y No se puede cargar a Knight Rider porque ya esta en el camion y no se puede descargar a Bumblebee porque no esta en camion."{
    camion.descargar(bumblebee)

    assert.that(camion.cosas().contains(knightRider))

    assert.equals(1, camion.cosas().size())

    assert.throwsException({ camion.cargar(knightRider) })
    assert.throwsException({ camion.descargar(bumblebee) })
  }
}

describe "El peso de cada uno de los objetos cargados es un numero par" {
  test "Un objeto de peso par en la carga hace que el metodo esPesoPar() devuelva True" {
    camion.cargar(bumblebee)

    assert.that(camion.cosas().contains(bumblebee))

    assert.that(camion.esPesoPar())
  }
  test "Un objeto de peso impar en la carga hace que el metodo esPesoPar() devuelva False" {
    knightRider.peso(3)
    
    camion.cargar(knightRider)

    assert.that(camion.cosas().contains(knightRider))

    assert.that(not camion.esPesoPar())
  }

  test "Varios objetos que son pares en la carga hace que el metodo esPesoPar() devuelva True"{
    camion.cargar(bumblebee)
    camion.cargar(knightRider)

    assert.that(camion.esPesoPar())
  }
  test "Varios objetos pares e impares en la carga hace que el metodo esPesoPar() devuelva False"{
    camion.cargar(bumblebee)

    knightRider.peso(3)

    camion.cargar(knightRider)

    assert.notThat(camion.esPesoPar())
  }
}

describe "El metodo tieneCargaConPesoDeterminado(kg) funciona correctamente" {
  test "tieneCargaConPesoDeterminado(kg) devuelve la carga que tenga 2kg de peso (paqueteLadrillos) " {
    camion.cargar(paqueteLadrillos)
    camion.cargar(bumblebee)
    camion.cargar(knightRider)

    assert.that(camion.tieneCargaConPesoDeterminado(2))
  }
  test "tieneCargaConPesoDeterminado(kg) devuelve la carga que tenga 800kg de peso (bumblebee) " {
    camion.cargar(paqueteLadrillos)
    camion.cargar(bumblebee)
    camion.cargar(knightRider)

    assert.that(camion.tieneCargaConPesoDeterminado(800))
  }

  test "tieneCargaConPesoDeterminado(kg) no devuelve nada porque se le pasa como argumento un peso que nadie tiene (13) " {
    camion.cargar(paqueteLadrillos)
    camion.cargar(bumblebee)
    camion.cargar(knightRider)

    assert.throwsException(camion.tieneCargaConPesoDeterminado(13))
  }
}

describe "El metodo pesoTotal() funciona correctamente"{
  test "El peso total del camion es 1000 (solo tara)" {
    assert.equals(1000, camion.pesoTotal())
  }

  test "El peso total del camion es 1800 (tara + bumblebee)"{
    camion.cargar(bumblebee)

    assert.equals(1800, camion.pesoTotal())
  }
}

describe "El metodo esExcesoDePeso() funciona correctamente"{
  test "No hay exceso de peso" {
    assert.notThat(camion.esExcesoDePeso())
  }
  test "Hay exceso de peso" {
    camion.cargar(bumblebee)
    knightRider.peso(2000)
    camion.cargar(knightRider)

    assert.that(camion.esExcesoDePeso())
  }
}

describe "El metodo cargaConNivelDePeligrosidadDeterminado(lvl) funciona correctamente" {
  method initialize() {
    camion.cargar(bateriaAntiaerea)
    camion.cargar(bumblebee)
    camion.cargar(residuosRadioactivos)
  }
  test "cargaConNivelDePeligrosidadDeterminado(0) devuelve la bateria antiaerea" {
    assert.equals(bateriaAntiaerea, camion.cargaConNivelDePeligrosidadDeterminado(0))
  }
  test "cargaConNivelDePeligrosidadDeterminado(15) devuelve a bumblebee" {
    assert.equals(bumblebee, camion.cargaConNivelDePeligrosidadDeterminado(15))
  }
  test "cargaConNivelDePeligrosidadDeterminado(200) devuelve a los residuos radioactivos" {
    assert.equals(residuosRadioactivos, camion.cargaConNivelDePeligrosidadDeterminado(200))
  }
  test "cargaConNivelDePeligrosidadDeterminado(30) debe romper, porque no se encuentra nada" {
    assert.throwsException({ camion.cargaConNivelDePeligrosidadDeterminado(30) })
  }
  test "Si se cambia a Bumblebee a modo robot y se vuelve a pedir algo de 30, entonces encuentra a Bumblebee" {
    bumblebee.transformar()
    assert.equals(bumblebee, camion.cargaConNivelDePeligrosidadDeterminado(30))
  }
  test "Si se carga la batería con misiles y se pide algo de peligrosidad 100 entonces encuentra a la batería" {
    bateriaAntiaerea.recargarMisiles()
    assert.equals(bateriaAntiaerea, camion.cargaConNivelDePeligrosidadDeterminado(100))
  }
}

describe "name" {
  test "description" {
    
  }
}